{"version":3,"sources":["useAnimationFrame.ts","Counter.tsx","Sphere.tsx","App.tsx","reportWebVitals.ts","index.tsx","App.module.css"],"names":["useAnimationFrame","callback","requestRef","React","useRef","previousTimeRef","animate","time","undefined","current","deltaTime","requestAnimationFrame","useEffect","cancelAnimationFrame","Counter","useState","count","setCount","prevCount","Math","round","Sphere","id","x","y","color","radius","diameter","gradientOffset","gradientColor","Color","darken","shadowTransform","style","top","left","position","display","borderRadius","height","width","margin","background","WebkitTransform","OTransform","transform","zIndex","App","className","styles","container","reportWebVitals","onPerfEntry","a","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"8MAwBeA,EAtBW,SAACC,GAGzB,IAAMC,EAAaC,IAAMC,SACnBC,EAAkBF,IAAMC,SAExBE,EAAU,SAAVA,EAAWC,GACf,QAAgCC,IAA5BH,EAAgBI,QAAuB,CACzC,IAAMC,EAAYH,EAAOF,EAAgBI,QACzCR,EAASS,GAEXL,EAAgBI,QAAUF,EAC1BL,EAAWO,QAAUE,sBAAsBL,IAG7CH,IAAMS,WAAU,WAEd,OADAV,EAAWO,QAAUE,sBAAsBL,GACpC,kBAAMO,qBAAqBX,EAAWO,YAE5C,K,OCRUK,EAVC,WAAoB,IAAD,EACPX,IAAMY,SAAS,GADR,mBAC1BC,EAD0B,KACnBC,EADmB,KAOjC,OAJAjB,GAAkB,SAACU,GACjBO,GAAS,SAACC,GAAD,OAAgBA,EAAwB,IAAZR,GAAoB,UAGpD,8BAAMS,KAAKC,MAAMJ,M,gCC0CXK,EAxCA,SAAC,GAA2D,IAAzDC,EAAwD,EAAxDA,GAAIC,EAAoD,EAApDA,EAAGC,EAAiD,EAAjDA,EAAGC,EAA8C,EAA9CA,MAAOC,EAAuC,EAAvCA,OAC3BC,EAAoB,EAATD,EACXE,EAAiBD,EAAW,EAC5BE,EAAgBC,IAAML,GAAOM,OAAO,KACpCC,EAAe,qCAAiCN,EAAjC,0BAAyDA,EAAS,EAAlE,OAErB,OACE,wBACEJ,GAAIA,EACJW,MAAO,CACLC,IAAKV,EAAIE,EACTS,KAAMZ,EAAIG,EACVU,SAAU,WACVC,QAAS,QACTC,aAAc,MACdC,OAAQZ,EACRa,MAAOb,EACPc,OAAQ,EACRC,WAAW,6BAAD,OAA+Bd,EAA/B,cAAmDA,EAAnD,eAAwEH,EAAxE,aAAkFI,EAAcE,OACxG,IADQ,MAXd,SAgBE,sBACEE,MAAO,CACLG,SAAU,WACVI,MAAO,OACPD,OAAQ,OACRG,WACE,uGACFC,gBAAiBX,EACjBY,WAAYZ,EACZa,UAAWb,EACXc,QAAS,QC1BJC,EAdH,WACV,OACE,sBAAKC,UAAWC,IAAOC,UAAvB,UACE,oDACA,oDACA,cAAC,EAAD,IAEA,cAAC,EAAD,CAAQ5B,GAAG,IAAIC,EAAG,GAAIC,EAAG,GAAIE,OAAQ,GAAID,MAAM,YAC/C,cAAC,EAAD,CAAQH,GAAG,IAAIC,EAAG,IAAKC,EAAG,GAAIE,OAAQ,GAAID,MAAM,YAChD,cAAC,EAAD,CAAQH,GAAG,IAAIC,EAAG,IAAKC,EAAG,GAAIE,OAAQ,GAAID,MAAM,c,uBCDvC0B,EAXM,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,2DAClBD,GAAeA,aAAuBE,UADpB,iCAEsC,6BAFtC,gBAEZC,EAFY,EAEZA,OAAQC,EAFI,EAEJA,OAAQC,EAFJ,EAEIA,OAAQC,EAFZ,EAEYA,OAAQC,EAFpB,EAEoBA,QACxCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,GAPY,4CAAH,sDCIrBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,UAAY,0B","file":"static/js/main.98a3466e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst useAnimationFrame = (callback: (deltaTime: number) => void): void => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef<number>();\n  const previousTimeRef = React.useRef<number>();\n\n  const animate = (time: number) => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current;\n      callback(deltaTime);\n    }\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current!);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Make sure the effect runs only once\n};\n\nexport default useAnimationFrame;\n","import React from \"react\";\nimport useAnimationFrame from \"./useAnimationFrame\";\n\nconst Counter = (): JSX.Element => {\n  const [count, setCount] = React.useState(0);\n\n  useAnimationFrame((deltaTime) => {\n    setCount((prevCount) => (prevCount + deltaTime * 0.01) % 100);\n  });\n\n  return <div>{Math.round(count)}</div>;\n};\n\nexport default Counter;\n","import React from \"react\";\n\nimport Color from \"color\";\n\ntype SphereProps = {\n  id?: string;\n  x: number;\n  y: number;\n  color: string;\n  radius: number;\n};\n\nconst Sphere = ({ id, x, y, color, radius }: SphereProps): JSX.Element => {\n  const diameter = radius * 2;\n  const gradientOffset = diameter / 3;\n  const gradientColor = Color(color).darken(0.25);\n  const shadowTransform = `rotateX(75deg) translateZ(-${radius}px) translateX(${radius / 3}px)`;\n\n  return (\n    <figure\n      id={id}\n      style={{\n        top: y - radius,\n        left: x - radius,\n        position: \"absolute\",\n        display: \"block\",\n        borderRadius: \"50%\",\n        height: diameter,\n        width: diameter,\n        margin: 0,\n        background: `radial-gradient(circle at ${gradientOffset}px ${gradientOffset}px, ${color}, ${gradientColor.darken(\n          0.5\n        )})`,\n      }}\n    >\n      <span\n        style={{\n          position: \"absolute\",\n          width: \"100%\",\n          height: \"100%\",\n          background:\n            \"radial-gradient(circle at 50% 50%, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.1) 50%, rgba(0, 0, 0, 0) 70%)\",\n          WebkitTransform: shadowTransform,\n          OTransform: shadowTransform,\n          transform: shadowTransform,\n          zIndex: -1,\n        }}\n      />\n    </figure>\n  );\n};\n\nexport default Sphere;\n","import React from \"react\";\nimport Counter from \"./Counter\";\nimport styles from \"./App.module.css\";\nimport Sphere from \"./Sphere\";\n\nconst App = (): JSX.Element => {\n  return (\n    <div className={styles.container}>\n      <h4>WEBSITES SHOULD BE</h4>\n      <h2>MORE LIKE TV SHOWS</h2>\n      <Counter />\n\n      <Sphere id=\"1\" x={90} y={90} radius={30} color=\"#5cabff\" />\n      <Sphere id=\"2\" x={530} y={90} radius={30} color=\"#d93c2b\" />\n      <Sphere id=\"3\" x={610} y={90} radius={30} color=\"white\" />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = async (onPerfEntry?: ReportHandler): Promise<void> => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    const { getCLS, getFID, getFCP, getLCP, getTTFB } = await import(\"web-vitals\");\n    getCLS(onPerfEntry);\n    getFID(onPerfEntry);\n    getFCP(onPerfEntry);\n    getLCP(onPerfEntry);\n    getTTFB(onPerfEntry);\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}