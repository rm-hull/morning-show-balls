{"version":3,"sources":["useAnimationFrame.ts","Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx","App.module.css"],"names":["useAnimationFrame","callback","requestRef","React","useRef","previousTimeRef","animate","time","undefined","current","deltaTime","requestAnimationFrame","useEffect","cancelAnimationFrame","Counter","useState","count","setCount","prevCount","Math","round","App","className","styles","container","reportWebVitals","onPerfEntry","a","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"8MAwBeA,EAtBW,SAACC,GAGzB,IAAMC,EAAaC,IAAMC,SACnBC,EAAkBF,IAAMC,SAExBE,EAAU,SAAVA,EAAWC,GACf,QAAgCC,IAA5BH,EAAgBI,QAAuB,CACzC,IAAMC,EAAYH,EAAOF,EAAgBI,QACzCR,EAASS,GAEXL,EAAgBI,QAAUF,EAC1BL,EAAWO,QAAUE,sBAAsBL,IAG7CH,IAAMS,WAAU,WAEd,OADAV,EAAWO,QAAUE,sBAAsBL,GACpC,kBAAMO,qBAAqBX,EAAWO,YAE5C,K,OCRUK,EAVC,WAAoB,IAAD,EACPX,IAAMY,SAAS,GADR,mBAC1BC,EAD0B,KACnBC,EADmB,KAOjC,OAJAjB,GAAkB,SAACU,GACjBO,GAAS,SAACC,GAAD,OAAgBA,EAAwB,IAAZR,GAAoB,UAGpD,8BAAMS,KAAKC,MAAMJ,M,gBCIXK,EAVH,WACV,OACE,sBAAKC,UAAWC,IAAOC,UAAvB,UACE,oDACA,oDACA,cAAC,EAAD,Q,uBCISC,EAXM,uCAAG,WAAOC,GAAP,yBAAAC,EAAA,2DAClBD,GAAeA,aAAuBE,UADpB,iCAEsC,6BAFtC,gBAEZC,EAFY,EAEZA,OAAQC,EAFI,EAEJA,OAAQC,EAFJ,EAEIA,OAAQC,EAFZ,EAEYA,OAAQC,EAFpB,EAEoBA,QACxCJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,GAPY,4CAAH,sDCIrBQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,UAAY,0B","file":"static/js/main.8da9ab94.chunk.js","sourcesContent":["import React from \"react\";\n\nconst useAnimationFrame = (callback: (deltaTime: number) => void): void => {\n  // Use useRef for mutable variables that we want to persist\n  // without triggering a re-render on their change\n  const requestRef = React.useRef<number>();\n  const previousTimeRef = React.useRef<number>();\n\n  const animate = (time: number) => {\n    if (previousTimeRef.current !== undefined) {\n      const deltaTime = time - previousTimeRef.current;\n      callback(deltaTime);\n    }\n    previousTimeRef.current = time;\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  React.useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current!);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Make sure the effect runs only once\n};\n\nexport default useAnimationFrame;\n","import React from \"react\";\nimport useAnimationFrame from \"./useAnimationFrame\";\n\nconst Counter = (): JSX.Element => {\n  const [count, setCount] = React.useState(0);\n\n  useAnimationFrame((deltaTime) => {\n    setCount((prevCount) => (prevCount + deltaTime * 0.01) % 100);\n  });\n\n  return <div>{Math.round(count)}</div>;\n};\n\nexport default Counter;\n","import React from \"react\";\nimport Counter from \"./Counter\";\nimport styles from \"./App.module.css\";\n\nconst App = (): JSX.Element => {\n  return (\n    <div className={styles.container}>\n      <h4>WEBSITES SHOULD BE</h4>\n      <h2>MORE LIKE TV SHOWS</h2>\n      <Counter />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = async (onPerfEntry?: ReportHandler): Promise<void> => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    const { getCLS, getFID, getFCP, getLCP, getTTFB } = await import(\"web-vitals\");\n    getCLS(onPerfEntry);\n    getFID(onPerfEntry);\n    getFCP(onPerfEntry);\n    getLCP(onPerfEntry);\n    getTTFB(onPerfEntry);\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};"],"sourceRoot":""}